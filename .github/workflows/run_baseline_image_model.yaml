name: Baseline Image Model Training
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      # Cache pip packages
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Cache virtual environment
      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: ./venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            echo "Setting up virtual environment"
            python -m venv venv
          fi
          
          source venv/bin/activate
          
          # First install numpy 1.x to avoid compatibility issues with PyTorch
          pip install "numpy<2.0.0"
          
          # Install PyTorch CPU-only version to avoid CUDA dependencies
          pip install torch==2.0.1 torchvision==0.15.2 --index-url https://download.pytorch.org/whl/cpu
          
          # Install core image processing libraries
          pip install opencv-python matplotlib seaborn scikit-learn pandas
          
          # Install project dependencies (excluding torch which we already installed)
          pip install -r requirements.txt --no-deps 
          pip check || echo "Warning: Some dependencies may be missing"

      # Skip CUDA checks and print environment info
      - name: Create CUDA check override
        run: |
          source venv/bin/activate
          
          # Create a temporary script to check PyTorch environment safely
          cat > check_env.py << 'EOF'
          import torch
          import os
          import sys
          
          # Print PyTorch version
          print(f"PyTorch version: {torch.__version__}")
          
          # Check for CUDA but handle errors gracefully
          try:
              is_cuda_available = torch.cuda.is_available()
          except:
              print("CUDA check failed, assuming CUDA is not available")
              is_cuda_available = False
          
          print(f"CUDA available: {is_cuda_available}")
          print(f"Device: {'cuda' if is_cuda_available else 'cpu'}")
          
          # Print other environment info
          try:
              import numpy
              print(f"NumPy version: {numpy.__version__}")
          except ImportError:
              print("NumPy not available")
          
          print(f"Python version: {sys.version}")
          print(f"OS: {os.name}")
          EOF
          
          # Run the script
          python check_env.py

      # Run the data loader test with detailed error logging
      - name: Test data loaders
        run: |
          source venv/bin/activate
          
          # Create a patch for the data_loaders.py to avoid CUDA usage
          cat > cuda_patch.py << 'EOF'
          import os
          import sys
          
          # Override the test_data_loaders.py file to avoid CUDA issues
          file_path = 'test_data_loaders.py'
          
          with open(file_path, 'r') as f:
              content = f.read()
          
          # Add a flag to avoid CUDA usage
          patched_content = content.replace(
              'import torch', 
              'import torch\nimport os\nos.environ["CUDA_VISIBLE_DEVICES"] = ""\ntorch.cuda.is_available = lambda: False'
          )
          
          with open(file_path, 'w') as f:
              f.write(patched_content)
              
          print("Applied CUDA patch to test_data_loaders.py")
          EOF
          
          # Apply the patch
          python cuda_patch.py
          
          # Run the script
          python test_data_loaders.py

      # Run training
      - name: Train baseline image model
        run: |
          source venv/bin/activate
          # Force CPU usage
          export CUDA_VISIBLE_DEVICES=""
          python src/training/train_image_model.py --batch-size 32 --epochs 10 --learning-rate 1e-3 --patience 5 --plot-history --device cpu

      # Run evaluation
      - name: Evaluate baseline image model
        run: |
          source venv/bin/activate
          # Force CPU usage
          export CUDA_VISIBLE_DEVICES=""
          python test_image_model.py --device cpu

      # Generate summary report
      - name: Generate summary report
        run: |
          source venv/bin/activate
          
          echo "# Baseline Image Model Results" > model_results.md
          echo "" >> model_results.md
          echo "## Environment Information" >> model_results.md
          echo "" >> model_results.md
          
          # Use the safer environment check
          python check_env.py >> model_results.md
          
          echo "" >> model_results.md
          echo "## Training Summary" >> model_results.md
          echo "" >> model_results.md
          
          # Add training metrics if available
          if [ -f "results/image_baseline/training_metrics.csv" ]; then
            echo "### Training Metrics" >> model_results.md
            echo "" >> model_results.md
            echo "Training metrics were saved to \`results/image_baseline/training_metrics.csv\`." >> model_results.md
            
            # Extract final epoch metrics
            FINAL_EPOCH=$(tail -n 1 results/image_baseline/training_metrics.csv)
            echo "" >> model_results.md
            echo "**Final epoch metrics:**" >> model_results.md
            echo "\`\`\`" >> model_results.md
            echo "$FINAL_EPOCH" >> model_results.md
            echo "\`\`\`" >> model_results.md
          fi
          
          # Add evaluation results if available
          if [ -f "results/image_baseline/image_baseline_eval.txt" ]; then
            echo "" >> model_results.md
            echo "## Evaluation Results" >> model_results.md
            echo "" >> model_results.md
            echo "\`\`\`" >> model_results.md
            cat results/image_baseline/image_baseline_eval.txt >> model_results.md
            echo "\`\`\`" >> model_results.md
          fi
          
          # Add confusion matrix image if available
          if [ -f "results/image_baseline/confusion_matrix.png" ]; then
            echo "" >> model_results.md
            echo "## Confusion Matrix" >> model_results.md
            echo "" >> model_results.md
            echo "![Confusion Matrix](results/image_baseline/confusion_matrix.png)" >> model_results.md
          fi
          
          # Add training history image if available
          if [ -f "results/image_baseline/training_history.png" ]; then
            echo "" >> model_results.md
            echo "## Training History" >> model_results.md
            echo "" >> model_results.md
            echo "![Training History](results/image_baseline/training_history.png)" >> model_results.md
          fi

      # Commit results
      - name: Commit results
        run: |
          git config --local user.email "github-actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # Add model results if they exist
          if [ -f "models/image_baseline_best.pt" ]; then
            git add models/image_baseline_best.pt
          fi
          
          # Add results directory if it exists
          if [ -d "results/image_baseline" ]; then
            git add results/image_baseline/
          fi
          
          # Add summary report
          git add model_results.md
          
          # Add sample batch visualization if it exists
          if [ -f "data_loader_test.png" ]; then
            git add data_loader_test.png
          fi
          
          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add baseline image model training results [ci skip]"
          fi

      # Push changes back to the repository
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }} 